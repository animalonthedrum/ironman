// # Grid
// Responsive grid system that uses html attributes to define grid behavior.

// VARS (override in your app)

$grid-tag: 'grid' !default;
$grid-content-tag: 'grid-el' !default;
$grid-sort-attrs: (first: 'first', higher: 'higher', lower: 'lower', last: 'last') !default;
$grid-breakpoints: (phone: 0, tablet: 500px, desktop: 900px) !default;
$grid-spacing: (loose: 2rem, tight: 1rem) !default;


// MIXINS

@mixin grid-breakpoint($start, $end: null) {
  $min-width: map-get($grid-breakpoints, $start);
  $max-width: map-get($grid-breakpoints, $end);
  @if $max-width {
    @media (min-width: $min-width) and (max-width: $max-width - 1) {
      @content;
    }
  } @else {
    @media (min-width: $min-width) {
      @content;
    }
  }
}

@mixin grid-breakpoint-rules($name, $width) {
  @media (min-width: $width) {
    @include grid-order($name);
    @include grid-column-spacing($name);
    @each $spacing-name, $spacing-val in $grid-spacing {
      @include grid-column-spacing($name, $spacing-name, $spacing-val);
    }
  }
}

@mixin grid-order($name) {
  $orders: (first: -2, higher: -1, lower: 1, last: 2);
  @each $sort, $order in $orders {
    [#{$grid-tag}~='#{map-get($grid-sort-attrs, $sort)}#{$name}'] {
      order: $order;
    }
  }
}

@mixin grid-spacing($spacing-name, $spacing-value) {
  [#{$grid-tag}~='#{$spacing-name}'] {
    margin: 0 - $spacing-value 0 0 0 - $spacing-value;
    &:not(:first-child) {
      margin-top: 0;
    }
    > * {
      display: block;
      padding: $spacing-value 0 0 $spacing-value;
    }
  }
}

@mixin grid-column-spacing($name, $spacing-name: null, $spacing-value: null) {
  $selector: if($spacing-name, '[#{$grid-tag}~="#{$spacing-name}"]', '[#{$grid-tag}]');

  $widths: ('1/1': 100%, '1/5': 20%, '1/4': 25%, '1/3': 33.333%, '1/2': 50%, '2/3': 66.666%, '3/4': 75%);

  #{$selector} {
    > [#{$grid-tag}~='shrink#{$name}'] {
      flex-basis: auto;
      flex-grow: 0;
    }
    @each $width, $percent in $widths {
      > [#{$grid-tag}~='#{$width}#{$name}'] {
        flex-basis: if($spacing-value, calc(#{$percent} - #{$spacing-value}), #{$percent});
      }
    }
  }
}

// BASE STYLES

#{'[#{$grid-tag}]'} {
  box-sizing: content-box !important; // necessary for IE calc() width fix
  display: flex;
  flex-direction: row;
  flex-grow: 100;
  flex-shrink: 1;
  flex-wrap: wrap;
  position: relative;

  > * {
    box-sizing: border-box;
  }
}
[#{$grid-tag}~='nowrap'] {
  flex-wrap: nowrap;
}

$grid-align: ('align-middle': center, 'align-bottom': flex-end, 'align-baseline': baseline);
$grid-justify: ('align-left': flex-start, 'align-center': center, 'align-right': flex-end, 'spaced': space-between);

@each $name, $align in $grid-align {
  [#{$grid-tag}~='#{$name}'] {
    align-items: $align;
  }
}
@each $name, $justify in $grid-align {
  [#{$grid-tag}~='#{$name}'] {
    justify-content: $justify;
  }
}

#{'[#{$grid-content-tag}]'} {
  display: block;
  flex-basis: 0; // no idea why this works
  min-width: 0;
}

// SPACING

@each $spacing-name, $spacing-val in $grid-spacing {
  @include grid-spacing($spacing-name, $spacing-val);
}

// BREAKPOINTS

@each $name, $width in $grid-breakpoints {
  $at-name: if($name, '@#{$name}', '');
  @include grid-breakpoint-rules($at-name, $width);
}
